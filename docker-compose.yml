version: '3.8'
services:
  #Config Server
  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  #Discovery Server (Eureka)
  discovery-server:
    build: ./discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - config-server

  #API Gateway
  gateway-server:
    build: ./gateway-server
    container_name: gateway-server
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - config-server
      - discovery-server

  #User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - DB_USERNAME=your_username
      - DB_PASSWORD=your_password
      - DB_PORT=6543
    depends_on:
      - config-server
      - discovery-server
      - user-db
    secrets:
      - db_username
      - db_password
    networks:
      - bank-network

  user-db:
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: your_username
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: userdb
    volumes:
      - user-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - bank-network


  #Transaction Service (Kafka)
  transaction-service:
    build: ./transaction-service
    container_name: transaction-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - config-server
      - discovery-server
      - kafka

  #Kafka
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL  # Specify internal broker communication listener
    depends_on:
      - zookeeper
    networks:
      - bank-network

  #Zookeeper for Kafka
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - bank-network


  # Monitoring Service
  monitoring-service:
    build: ./monitoring
    container_name: monitoring-service
    ports:
      - "8084:8084"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    depends_on:
      - config-server
      - discovery-server

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  # Grafana for Visualization Metrics
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana-provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin

  # SonarQube for Code Quality
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    depends_on:
      - sonar-db
    networks:
      - bank-network

  # Sona Nexus:
  nexus:
    image: sonatype/nexus3
    container_name: nexus
    ports:
      - "8099:8081" # External port 8099 maps to container port 8081
    volumes:
      - nexus-data:/nexus-data
    networks:
      - bank-network
    restart: always

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - bank-network

  # PostgreSQL for SonarQube Database
  sonar-db:
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonarqube
    volumes:
      - sonar-db-data:/var/lib/postgresql/data

volumes:
  sonar-db-data:
  user-db-data:
  nexus-data:

networks:
  bank-network:

secrets:
  db_username:
    external: true
  db_password:
    external: true
